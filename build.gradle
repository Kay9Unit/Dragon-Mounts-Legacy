buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = "$game_version-$mod_version"
group = 'com.github.kay9.dragonmounts'
archivesBaseName = 'dragonmounts'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${game_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=dragonmounts.mixins.json"

            mods {
                dragonmounts {
                    source sourceSets.main
                }
            }
        }

        second_client {
            parent runs.client
            args '--username', 'Dev2'
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=dragonmounts.mixins.json"

            mods {
                dragonmounts {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            args '--mod', 'dragonmounts', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dragonmounts {
                    sources sourceSets.main
                    sources sourceSets.test
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${game_version}-${forge_version}"

    annotationProcessor "org.spongepowered:mixin:${mixin_processor_version}:processor"
}

mixin {
    add sourceSets.main, 'dragonmounts.mixins.refmap.json'
    config 'dragonmounts.mixins.json'

    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "dragonmounts",
                "Specification-Vendor"    : "Kay9",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Kay9",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
